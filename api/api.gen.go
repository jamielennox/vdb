// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for SetAuthorizerJSONBodyValidator.
const (
	Opa SetAuthorizerJSONBodyValidator = "opa"
)

// Defines values for SetValidatorJSONBodyValidator.
const (
	Cuelang SetValidatorJSONBodyValidator = "cuelang"
)

// Authorizer defines model for Authorizer.
type Authorizer struct {
	Labels *Labels `json:"labels,omitempty"`
	Meta   Meta    `json:"meta"`
	Value  Value   `json:"value"`
}

// ErrBase defines model for ErrBase.
type ErrBase struct {
	Message string `json:"message"`
}

// ErrNotFound defines model for ErrNotFound.
type ErrNotFound struct {
	Message  string      `json:"message"`
	Revision *RevisionId `json:"revision,omitempty"`
	Type     *string     `json:"type,omitempty"`
	Value    *string     `json:"value,omitempty"`
}

// ErrServerError defines model for ErrServerError.
type ErrServerError = ErrBase

// Labels defines model for Labels.
type Labels map[string]string

// Meta defines model for Meta.
type Meta struct {
	Id       TypeId     `json:"id"`
	Revision RevisionId `json:"revision"`
	Type     TypeName   `json:"type"`
	Version  int64      `json:"version"`
}

// Revision defines model for Revision.
type Revision struct {
	Labels *Labels `json:"labels,omitempty"`
	Meta   Meta    `json:"meta"`
	Value  Value   `json:"value"`
}

// RevisionId defines model for RevisionId.
type RevisionId = uint64

// TypeId defines model for TypeId.
type TypeId = string

// TypeName defines model for TypeName.
type TypeName = string

// Validator defines model for Validator.
type Validator struct {
	Labels *Labels `json:"labels,omitempty"`
	Meta   Meta    `json:"meta"`
	Value  Value   `json:"value"`
}

// Value defines model for Value.
type Value = interface{}

// SetAuthorizerJSONBody defines parameters for SetAuthorizer.
type SetAuthorizerJSONBody struct {
	Config    *interface{}                    `json:"config,omitempty"`
	Validator *SetAuthorizerJSONBodyValidator `json:"validator,omitempty"`
}

// SetAuthorizerJSONBodyValidator defines parameters for SetAuthorizer.
type SetAuthorizerJSONBodyValidator string

// SetValidatorJSONBody defines parameters for SetValidator.
type SetValidatorJSONBody struct {
	Config    *interface{}                   `json:"config,omitempty"`
	Validator *SetValidatorJSONBodyValidator `json:"validator,omitempty"`
}

// SetValidatorJSONBodyValidator defines parameters for SetValidator.
type SetValidatorJSONBodyValidator string

// SetAuthorizerJSONRequestBody defines body for SetAuthorizer for application/json ContentType.
type SetAuthorizerJSONRequestBody SetAuthorizerJSONBody

// SetDataJSONRequestBody defines body for SetData for application/json ContentType.
type SetDataJSONRequestBody = Value

// SetValidatorJSONRequestBody defines body for SetValidator for application/json ContentType.
type SetValidatorJSONRequestBody SetValidatorJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /collections/{type}/authorizer)
	GetAuthorizer(w http.ResponseWriter, r *http.Request, pType TypeName)

	// (POST /collections/{type}/authorizer)
	SetAuthorizer(w http.ResponseWriter, r *http.Request, pType TypeName)

	// (GET /collections/{type}/data/{id})
	GetDataById(w http.ResponseWriter, r *http.Request, pType TypeName, id TypeId)

	// (POST /collections/{type}/data/{id})
	SetData(w http.ResponseWriter, r *http.Request, pType TypeName, id TypeId)

	// (GET /collections/{type}/data/{typId}/revisions)
	ListDataRevisions(w http.ResponseWriter, r *http.Request, pType TypeName, typId TypeId)

	// (GET /collections/{type}/data/{typId}/revisions/{revId})
	GetDataRevisionById(w http.ResponseWriter, r *http.Request, pType TypeName, typId TypeId, revId RevisionId)

	// (GET /collections/{type}/validator)
	GetValidatorSummary(w http.ResponseWriter, r *http.Request, pType TypeName)

	// (POST /collections/{type}/validator)
	SetValidator(w http.ResponseWriter, r *http.Request, pType TypeName)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /collections/{type}/authorizer)
func (_ Unimplemented) GetAuthorizer(w http.ResponseWriter, r *http.Request, pType TypeName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /collections/{type}/authorizer)
func (_ Unimplemented) SetAuthorizer(w http.ResponseWriter, r *http.Request, pType TypeName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /collections/{type}/data/{id})
func (_ Unimplemented) GetDataById(w http.ResponseWriter, r *http.Request, pType TypeName, id TypeId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /collections/{type}/data/{id})
func (_ Unimplemented) SetData(w http.ResponseWriter, r *http.Request, pType TypeName, id TypeId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /collections/{type}/data/{typId}/revisions)
func (_ Unimplemented) ListDataRevisions(w http.ResponseWriter, r *http.Request, pType TypeName, typId TypeId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /collections/{type}/data/{typId}/revisions/{revId})
func (_ Unimplemented) GetDataRevisionById(w http.ResponseWriter, r *http.Request, pType TypeName, typId TypeId, revId RevisionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /collections/{type}/validator)
func (_ Unimplemented) GetValidatorSummary(w http.ResponseWriter, r *http.Request, pType TypeName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /collections/{type}/validator)
func (_ Unimplemented) SetValidator(w http.ResponseWriter, r *http.Request, pType TypeName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuthorizer operation middleware
func (siw *ServerInterfaceWrapper) GetAuthorizer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthorizer(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetAuthorizer operation middleware
func (siw *ServerInterfaceWrapper) SetAuthorizer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetAuthorizer(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDataById operation middleware
func (siw *ServerInterfaceWrapper) GetDataById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id TypeId

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataById(w, r, pType, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetData operation middleware
func (siw *ServerInterfaceWrapper) SetData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id TypeId

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetData(w, r, pType, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListDataRevisions operation middleware
func (siw *ServerInterfaceWrapper) ListDataRevisions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Path parameter "typId" -------------
	var typId TypeId

	err = runtime.BindStyledParameterWithOptions("simple", "typId", chi.URLParam(r, "typId"), &typId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDataRevisions(w, r, pType, typId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDataRevisionById operation middleware
func (siw *ServerInterfaceWrapper) GetDataRevisionById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Path parameter "typId" -------------
	var typId TypeId

	err = runtime.BindStyledParameterWithOptions("simple", "typId", chi.URLParam(r, "typId"), &typId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "typId", Err: err})
		return
	}

	// ------------- Path parameter "revId" -------------
	var revId RevisionId

	err = runtime.BindStyledParameterWithOptions("simple", "revId", chi.URLParam(r, "revId"), &revId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "revId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataRevisionById(w, r, pType, typId, revId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetValidatorSummary operation middleware
func (siw *ServerInterfaceWrapper) GetValidatorSummary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetValidatorSummary(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetValidator operation middleware
func (siw *ServerInterfaceWrapper) SetValidator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "type" -------------
	var pType TypeName

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetValidator(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/collections/{type}/authorizer", wrapper.GetAuthorizer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/collections/{type}/authorizer", wrapper.SetAuthorizer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/collections/{type}/data/{id}", wrapper.GetDataById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/collections/{type}/data/{id}", wrapper.SetData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/collections/{type}/data/{typId}/revisions", wrapper.ListDataRevisions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/collections/{type}/data/{typId}/revisions/{revId}", wrapper.GetDataRevisionById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/collections/{type}/validator", wrapper.GetValidatorSummary)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/collections/{type}/validator", wrapper.SetValidator)
	})

	return r
}

type GetAuthorizerRequestObject struct {
	Type TypeName `json:"type"`
}

type GetAuthorizerResponseObject interface {
	VisitGetAuthorizerResponse(w http.ResponseWriter) error
}

type GetAuthorizer200JSONResponse Authorizer

func (response GetAuthorizer200JSONResponse) VisitGetAuthorizerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorizer404JSONResponse ErrNotFound

func (response GetAuthorizer404JSONResponse) VisitGetAuthorizerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorizer500JSONResponse ErrServerError

func (response GetAuthorizer500JSONResponse) VisitGetAuthorizerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SetAuthorizerRequestObject struct {
	Type TypeName `json:"type"`
	Body *SetAuthorizerJSONRequestBody
}

type SetAuthorizerResponseObject interface {
	VisitSetAuthorizerResponse(w http.ResponseWriter) error
}

type SetAuthorizer200JSONResponse Revision

func (response SetAuthorizer200JSONResponse) VisitSetAuthorizerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetAuthorizer404JSONResponse ErrNotFound

func (response SetAuthorizer404JSONResponse) VisitSetAuthorizerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SetAuthorizer500JSONResponse ErrServerError

func (response SetAuthorizer500JSONResponse) VisitSetAuthorizerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDataByIdRequestObject struct {
	Type TypeName `json:"type"`
	Id   TypeId   `json:"id"`
}

type GetDataByIdResponseObject interface {
	VisitGetDataByIdResponse(w http.ResponseWriter) error
}

type GetDataById200JSONResponse Revision

func (response GetDataById200JSONResponse) VisitGetDataByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDataById404JSONResponse ErrNotFound

func (response GetDataById404JSONResponse) VisitGetDataByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDataById500JSONResponse ErrServerError

func (response GetDataById500JSONResponse) VisitGetDataByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SetDataRequestObject struct {
	Type TypeName `json:"type"`
	Id   TypeId   `json:"id"`
	Body *SetDataJSONRequestBody
}

type SetDataResponseObject interface {
	VisitSetDataResponse(w http.ResponseWriter) error
}

type SetData200JSONResponse Revision

func (response SetData200JSONResponse) VisitSetDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetData404JSONResponse ErrNotFound

func (response SetData404JSONResponse) VisitSetDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SetData500JSONResponse ErrServerError

func (response SetData500JSONResponse) VisitSetDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListDataRevisionsRequestObject struct {
	Type  TypeName `json:"type"`
	TypId TypeId   `json:"typId"`
}

type ListDataRevisionsResponseObject interface {
	VisitListDataRevisionsResponse(w http.ResponseWriter) error
}

type ListDataRevisions200JSONResponse []Revision

func (response ListDataRevisions200JSONResponse) VisitListDataRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDataRevisions404JSONResponse ErrNotFound

func (response ListDataRevisions404JSONResponse) VisitListDataRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListDataRevisions500JSONResponse ErrServerError

func (response ListDataRevisions500JSONResponse) VisitListDataRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDataRevisionByIdRequestObject struct {
	Type  TypeName   `json:"type"`
	TypId TypeId     `json:"typId"`
	RevId RevisionId `json:"revId"`
}

type GetDataRevisionByIdResponseObject interface {
	VisitGetDataRevisionByIdResponse(w http.ResponseWriter) error
}

type GetDataRevisionById200JSONResponse Revision

func (response GetDataRevisionById200JSONResponse) VisitGetDataRevisionByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDataRevisionById404JSONResponse ErrNotFound

func (response GetDataRevisionById404JSONResponse) VisitGetDataRevisionByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDataRevisionById500JSONResponse ErrServerError

func (response GetDataRevisionById500JSONResponse) VisitGetDataRevisionByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetValidatorSummaryRequestObject struct {
	Type TypeName `json:"type"`
}

type GetValidatorSummaryResponseObject interface {
	VisitGetValidatorSummaryResponse(w http.ResponseWriter) error
}

type GetValidatorSummary200JSONResponse Validator

func (response GetValidatorSummary200JSONResponse) VisitGetValidatorSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetValidatorSummary404JSONResponse ErrNotFound

func (response GetValidatorSummary404JSONResponse) VisitGetValidatorSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetValidatorSummary500JSONResponse ErrServerError

func (response GetValidatorSummary500JSONResponse) VisitGetValidatorSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SetValidatorRequestObject struct {
	Type TypeName `json:"type"`
	Body *SetValidatorJSONRequestBody
}

type SetValidatorResponseObject interface {
	VisitSetValidatorResponse(w http.ResponseWriter) error
}

type SetValidator200JSONResponse Revision

func (response SetValidator200JSONResponse) VisitSetValidatorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetValidator404JSONResponse ErrNotFound

func (response SetValidator404JSONResponse) VisitSetValidatorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SetValidator500JSONResponse ErrServerError

func (response SetValidator500JSONResponse) VisitSetValidatorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /collections/{type}/authorizer)
	GetAuthorizer(ctx context.Context, request GetAuthorizerRequestObject) (GetAuthorizerResponseObject, error)

	// (POST /collections/{type}/authorizer)
	SetAuthorizer(ctx context.Context, request SetAuthorizerRequestObject) (SetAuthorizerResponseObject, error)

	// (GET /collections/{type}/data/{id})
	GetDataById(ctx context.Context, request GetDataByIdRequestObject) (GetDataByIdResponseObject, error)

	// (POST /collections/{type}/data/{id})
	SetData(ctx context.Context, request SetDataRequestObject) (SetDataResponseObject, error)

	// (GET /collections/{type}/data/{typId}/revisions)
	ListDataRevisions(ctx context.Context, request ListDataRevisionsRequestObject) (ListDataRevisionsResponseObject, error)

	// (GET /collections/{type}/data/{typId}/revisions/{revId})
	GetDataRevisionById(ctx context.Context, request GetDataRevisionByIdRequestObject) (GetDataRevisionByIdResponseObject, error)

	// (GET /collections/{type}/validator)
	GetValidatorSummary(ctx context.Context, request GetValidatorSummaryRequestObject) (GetValidatorSummaryResponseObject, error)

	// (POST /collections/{type}/validator)
	SetValidator(ctx context.Context, request SetValidatorRequestObject) (SetValidatorResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAuthorizer operation middleware
func (sh *strictHandler) GetAuthorizer(w http.ResponseWriter, r *http.Request, pType TypeName) {
	var request GetAuthorizerRequestObject

	request.Type = pType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthorizer(ctx, request.(GetAuthorizerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthorizer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthorizerResponseObject); ok {
		if err := validResponse.VisitGetAuthorizerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetAuthorizer operation middleware
func (sh *strictHandler) SetAuthorizer(w http.ResponseWriter, r *http.Request, pType TypeName) {
	var request SetAuthorizerRequestObject

	request.Type = pType

	var body SetAuthorizerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetAuthorizer(ctx, request.(SetAuthorizerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAuthorizer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetAuthorizerResponseObject); ok {
		if err := validResponse.VisitSetAuthorizerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDataById operation middleware
func (sh *strictHandler) GetDataById(w http.ResponseWriter, r *http.Request, pType TypeName, id TypeId) {
	var request GetDataByIdRequestObject

	request.Type = pType
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDataById(ctx, request.(GetDataByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDataById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDataByIdResponseObject); ok {
		if err := validResponse.VisitGetDataByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetData operation middleware
func (sh *strictHandler) SetData(w http.ResponseWriter, r *http.Request, pType TypeName, id TypeId) {
	var request SetDataRequestObject

	request.Type = pType
	request.Id = id

	var body SetDataJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetData(ctx, request.(SetDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetDataResponseObject); ok {
		if err := validResponse.VisitSetDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDataRevisions operation middleware
func (sh *strictHandler) ListDataRevisions(w http.ResponseWriter, r *http.Request, pType TypeName, typId TypeId) {
	var request ListDataRevisionsRequestObject

	request.Type = pType
	request.TypId = typId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDataRevisions(ctx, request.(ListDataRevisionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDataRevisions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDataRevisionsResponseObject); ok {
		if err := validResponse.VisitListDataRevisionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDataRevisionById operation middleware
func (sh *strictHandler) GetDataRevisionById(w http.ResponseWriter, r *http.Request, pType TypeName, typId TypeId, revId RevisionId) {
	var request GetDataRevisionByIdRequestObject

	request.Type = pType
	request.TypId = typId
	request.RevId = revId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDataRevisionById(ctx, request.(GetDataRevisionByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDataRevisionById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDataRevisionByIdResponseObject); ok {
		if err := validResponse.VisitGetDataRevisionByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetValidatorSummary operation middleware
func (sh *strictHandler) GetValidatorSummary(w http.ResponseWriter, r *http.Request, pType TypeName) {
	var request GetValidatorSummaryRequestObject

	request.Type = pType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetValidatorSummary(ctx, request.(GetValidatorSummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetValidatorSummary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetValidatorSummaryResponseObject); ok {
		if err := validResponse.VisitGetValidatorSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetValidator operation middleware
func (sh *strictHandler) SetValidator(w http.ResponseWriter, r *http.Request, pType TypeName) {
	var request SetValidatorRequestObject

	request.Type = pType

	var body SetValidatorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetValidator(ctx, request.(SetValidatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetValidator")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetValidatorResponseObject); ok {
		if err := validResponse.VisitSetValidatorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
